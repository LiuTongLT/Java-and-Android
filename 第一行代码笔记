第一章 开始启程
1. Android的系统框架：Linux内核层，系统运行库层，应用框架层和应用层
2. Android的四大组件：Activity（活动），service（服务），BroadcatReceiver（广播接收器）和
   ContentProvider（内容提供器）。
   2.1 Activity是Android应用程序的门面，凡是应用中看得到的东西都是放到活动中的。
   2.2 Service在后台默默运行，即使用户已经推出应用，服务也是可以继续运行的。
   2.3 BroadcastReceiver允许你的应用可以接受来自各处的广播消息，比如电话短信等，当然你的应用也
       可以向外发出广播消息。
   2.4 ContentProvider是为应用程序之间共享数据提供可能，比如从系统电话薄中获取联系人。
3. Android系统是通过包名（package name）来区分不同的应用程序的，所以包名必须具有唯一性。
4. 项目（project）的目录结构
   4.1 .gradle和.idea：Android Studio自动生成的文件
   4.2 app：项目中的的资源，代码都放置在这个目录下
   4.3 build：包含了在编译时生成的文件
   4.4 gradle：包含了gradle wrapper的配置文件
   4.5 .gitignore: 将指定的目录或文件排除在版本控制之外
   4.6 build.gradle: 项目全局的gradle构建脚本
   4.7 gradle.properties：全局的gradle配置文件，在这里配置的属性会影响到项目中所有gradle编译脚本
   4.8 gradlew和gradle.bat：在命令行界面执行gradle命令，gradlew用于Linux或mac系统，gradle.bat用于Windows系统
   4.9 settings.gradle: 指定项目中所有引入的模块
5. Activity是Android系统提供的一个活动基类，我们项目中所有的活动都必须继承它或者它的子类才能拥有活动的特性（如：AppCompactActivity
   是Activity的子类）
   5.1 一个活动被创建时，onCreate()->setContentView()引入一个layout布局
6. app目录下面的res目录
   6.1 res/values/strings.xml: 在代码中用R.string.hello_world调用或者在XML中用@string/hello_world调用
   6.2 build.gradle(project)：repositories里面都声明的jcenter()和google()配置，我们就可以引用任何jcenter和google上的开源项目了
   6.3 build.gradle(app): 第一行apply plugin有两种值，第一种com.android.application表示这是一个应用程序模块，第二种com.android.library
       表示这是一个库模块，应用程序模块可以直接运行，库模块只能依附在别的程序模块来运行
7. Activity类中的finish()方法可以销毁当前活动
8. 活动的状态，运行状态，暂停状态，停止状态和销毁状态
9. 活动的生存期：onCreate()->onStart()->onResume()->onPause()->onStop()->onDestroy(), onRestart()
   9.1 完整的生存期：onCreate()->onDestroy(), 可见生存期：onStart()->onStop(), 前台生存期：onResume()->onPause()
   9.2 在onStop()之后，onDestroy()之前执行onRestart()可以返回到onStart()
10. 活动的启动模式
    10.1 standard: 默认启动模式，对于使用standard模式的活动，系统不会在乎这个活动是否已经在返回栈中存在，每次启动都会创建该活动的一个新的实例（会出现活动明明已经在栈顶了，再次启动的时候还要创建一个新的活动实例）
    10.2 singleTop：与standard模式不同的是如果活动已经在栈顶，再次启动就不会重建一个活动实例（解决重复创建栈顶活动的问题），但是当活动不在栈顶时，再次启动仍要重建一个实例
    10.3 singleTask：让某个活动在整个应用程序的上下文只存在一个实例，当活动的启动模式指定为singleTask，每次启动该活动时系统首先会在返回栈中检查是否存在该活动的实例，如果发现已经存在则直接使用该实例，并把这个活动之上的所有活动统统出栈，如果没有发现就创建一个新的活动实例
    10.4 singleInstance：指定为singleInstance模式的活动会启用一个新的返回栈来管理这个活动，且其他应用程序也可以来访问这个活动，在退出时，最后退出这个新的返回栈的活动实例

